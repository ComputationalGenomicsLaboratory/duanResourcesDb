library(dplyr)
require(dplyr)
convert_ipynb("Downloads/using-uk-biobank-to-scale-up-your-research-r.ipynb", output = xfun::with_ext(input, "Rmd"))
library(rmarkdown)
library(rmarkdown)
convert_ipynb("Downloads/using-uk-biobank-to-scale-up-your-research-r.ipynb", output = xfun::with_ext(input, "Rmd"))
convert_ipynb(input = "Downloads/using-uk-biobank-to-scale-up-your-research-r.ipynb", output = xfun::with_ext(input, "Rmd"))
knitr::opts_chunk$set(echo = TRUE)
print("hello world!")
library(tidyverse)
install.package('tidyverse')
install.packages('tidyverse')
setwd("~/OneDrive - Queen's University/DuanOneDrive/duanResourcesDb")
packageVersion("shiny")
db <- data.frame("resourceName", "dbContributor", "date", "tag", "description")
db
View(db)
db <- data.frame(matrix(ncol = 5, nrow = 0))
colnames(db) <- c("resourceName", "dbContributor", "date", "tag", "description")
View(db)
write.csv(db, file.path("./resources.csv"))
# Original Authors: Amanda Zacharias, Sara Stickley, Zhi Yi Fang
# Date: 2023-11-09
# Email: 16amz1@queensu.ca
#-------------------------------------------------
# Notes -------------------------------------------
# R v3.6.0
#
#
#
# Options -----------------------------------------
source("helpers.R")
shiny::runApp()
library(shinydashboard)
# Pathways -----------------------------------------
# Db is a csv, maybe we can try SQL in future!
dbPath <- file.path("./resources.csv")
library(shinydashboard)
packageVersion("shinydashboard")
runApp()
# Define UI -----------------------------------------
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
collapsed = TRUE,
div(htmlOutput("Welcome"), style = "padding: 20px"),
sidebarMenu(
menuItem("View Tables", tabName = "viewTable", icon = icon("search")),
menuItem("Create Tables", tabName = "createTable", icon = icon("plus-square")),
menuItem("Update Tables", tabName = "updateTable", icon = icon("exchange-alt")),
menuItem("Insert Entries", tabName = "insertValue", icon = icon("edit")),
menuItem("Delete Tables", tabName = "delTable", icon = icon("trash-alt")),
menuItem("About", tabName = "about", icon = icon("info-circle"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "viewTable", uiOutput("tab1UI")),
tabItem(tabName = "delTable", uiOutput("tab2UI")),
tabItem(tabName = "updateTable", uiOutput("tab3UI")),
tabItem(tabName = "createTable", uiOutput("tab4UI")),
tabItem(tabName = "insertValue", uiOutput("tab5UI")),
tabItem(tabName = "about", uiOutput("tab6UI"))
)
)
)
# Define server logic -----------------------------------------
server <- function(input, output) {
}
# Run the application  -----------------------------------------
shinyApp(ui = ui, server = server)
library(shinyjs)
packageVersion("libraryjs")
packageVersion("shinyjs")
library(shinyjs) # 2.1.0
runApp()
runApp()
runApp()
tableIntro <- list(tools = "Tools for analysis (i.e. softwares)",
databases = "Databases",
papers = "Papers",
misc = "Miscellaneous")
rm(db)
runApp()
library(shinyauthr)
BiocManager::install("shinyauthr")
name(tableIntro)
names(tableIntro)
library(DBI)
packageVersion("DBI")
library(RSQLite)
packageVersion("RSQLite")
# Load data -----------------------------------------
db <- dbConnect(RSQLite::SQLite(), dbname = "duanResources.db")
# Load data -----------------------------------------
db <- dbConnect(RSQLite::SQLite(), dbname = "duanResources.db")
View(db)
# Pathways -----------------------------------------
csvPath <- file.path("./resources.csv")
# End
dbDisconnect()
# End  -----------------------------------------
dbDisconnect(db)
# Load data -----------------------------------------
csv <- read.csv(csvPath, row.names = 1, stringsAsFactors = FALSE)
View(csv)
View(csv)
# Code -----------------------------------------
# Add to csv a resource
csv[1, ] <- c("StringTie", "AmandaZacharias", "09Nov2023", "tool", "Tool used to quantify gene expression.")
View(csv)
# Add csv to db
copy_to(db, csv)
# Load data -----------------------------------------
csv <- read.csv(csvPath, row.names = 1, stringsAsFactors = FALSE)
# Code -----------------------------------------
# Add to csv a resource
toolDf <- csv
toolDf[1, ] <- c("StringTie", "AmandaZacharias", "09Nov2023", "tool", "Tool used to quantify gene expression.")
# Add csv to db
copy_to(db, toolDb)
# Add csv to db
copy_to(db, toolDf)
databases <- csv
databasesDf <- csv
databasesDf[1, ] <- c("Gencode", "AmandaZacharias", "09Nov2023", "database", "Database of genome assemblies")
databasesDf[1, ] <- c("Gencode", "AmandaZacharias", "09Nov2023", "database", "Database of genomes")
papersDf <- csv
paperDf[1, ] <- c("paperExample", 'AmandaZacharias', "09Nov2023", "paper", "Test paper")
papersDf <- csv
papersDf[1, ] <- c("paperExample", 'AmandaZacharias', "09Nov2023", "paper", "Test paper")
miscDf <-
# Add csv to db =======
copy_to(db, toolDf)
miscDf <- csv
miscDf[1, ] <- c("miscThing", "AmandaZacharias", "09Nov2023", "misc", "test")
rm(databases)
library(dplyr)
library(tidyverse)
library(dplyr)
BiocManager::install("dplyr")
# Write dbs -----------------------------------------
write.csv(toolDf, file.path(csvDir, "tools.csv"))
write.csv(databasesDf, file.path(csvDir, "databasesDf.csv"))
csvDir <- "./csvs"
system(paste('mkdir', csvDir))
# Write dbs -----------------------------------------
write.csv(toolDf, file.path(csvDir, "tools.csv"))
write.csv(databasesDf, file.path(csvDir, "databasesDf.csv"))
write.csv(papersDf, file.path(csvDir, "papersDf.csv"))
write.csv(miscDf, file.path(csvDir, "miscDf.csv"))
# End  -----------------------------------------
dbDisconnect(db)
rm(db)
library("dplyr")
# Load csvs as SQL dbs -----------------------------------------
toolDb <- dplyr::src_sqlite(file.path(csvsDir, "tools.csv"))
# Load csvs as SQL dbs -----------------------------------------
toolDb <- dplyr::tbl(file.path(csvDir, "tools.csv"), create = TRUE)
# Load csvs as SQL dbs -----------------------------------------
toolDb <- dbplyr::tbl(file.path(csvDir, "tools.csv"), create = TRUE)
library(rlang)
BiocManager::install("rlang")
BiocManager::install("rlang", force = TRUE)
clear
# Load csvs as SQL dbs -----------------------------------------
toolDb <- dbplyr::src_sqlite(file.path(csvDir, "tools.csv"), create = TRUE)
library(rlang)
detach("package:rlang", unload = TRUE)
detach("rlang")
